pool:
    vmImage: 'Ubuntu-16.04'
    demands: npm

steps:
    - task: NodeTool@0
      inputs:
          versionSpec: 10.x
      displayName: 'Use Node 10.x'

    - task: Npm@1
      inputs:
          command: custom
          customCommand: ci
          workingDir: 'src/scanner'
      displayName: 'install dependencies'

    - task: Npm@1
      inputs:
          command: custom
          customCommand: run lint
          workingDir: 'src/scanner'
      displayName: run linter

    - task: Npm@1
      inputs:
          command: custom
          customCommand: run format-check
          workingDir: 'src/scanner'
      displayName: check code formatting

    - task: Npm@1
      inputs:
          command: custom
          customCommand: run clean
          workingDir: 'src/scanner'
      displayName: clean

    - task: Npm@1
      inputs:
          command: custom
          customCommand: run build -- --env.version=$(Build.BuildId)
          workingDir: 'src/scanner'
      displayName: build

    - task: Npm@1
      inputs:
          command: custom
          customCommand: run test -- --ci
          workingDir: 'src/scanner'
      displayName: run unit tests

    - task: PublishTestResults@2
      inputs:
          testResultsFiles: $(System.DefaultWorkingDirectory)/src/scanner/test-results/unit/junit.xml
          testRunTitle: unit tests
      condition: always()
      displayName: publish unit test results

    - task: PublishCodeCoverageResults@1
      inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: $(System.DefaultWorkingDirectory)/src/scanner/test-results/unit/coverage/cobertura-coverage.xml
          failIfCoverageEmpty: true
      displayName: publish code coverage

    - task: Npm@1
      inputs:
          command: custom
          customCommand: run build-image
          workingDir: 'src/scanner'
      displayName: build docker image

    - task: Docker@1
      inputs:
          azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
          azureContainerRegistry: $(azureContainerRegistryName).azurecr.io
          command: login
      displayName: Container registry login
      condition: and(succeeded(), in(variables['publishImage'], 'true'))

    - script: |
          docker tag scanner $(azureContainerRegistryName).azurecr.io/$(imageName)
          docker tag scanner $(azureContainerRegistryName).azurecr.io/$(imageName):$(Build.BuildId)
          docker push $(azureContainerRegistryName).azurecr.io/$(imageName)
          docker push $(azureContainerRegistryName).azurecr.io/$(imageName):$(Build.BuildId)
      displayName: 'Push image to container registry'
      condition: and(succeeded(), in(variables['publishImage'], 'true'))
